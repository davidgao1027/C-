#include <iostream>
#include <cstdlib>
#include <ctime>
#include <iomanip>
#include "OneDArray.h"

using namespace std;

class TwoDArray: public OneDArray {
public:
	TwoDArray(int rowNum = 0, int colNum = 0);
	TwoDArray(const TwoDArray& TwoDA);
	~TwoDArray() {delete [] A;};
	TwoDArray& operator=(const TwoDArray& TwoDA);
	const TwoDArray operator+(const TwoDArray& TwoDB);
    const TwoDArray operator-(const TwoDArray& TwoDB);
	OneDArray& operator[](int i) const {return A[i];};
    void Output();
	void FillData();
private:
	int rowSize, colSize;
	OneDArray *A;
};

int main(){
	int rowNum, colNum, i;

	cout << "*** Input the size of 2-dimensional array A and B ***" << endl;
	cout << "The size of row: ";
	cin >> rowNum;
	cout << "The size of column: ";
	cin >> colNum;

	TwoDArray TwoDA(rowNum, colNum), TwoDB(rowNum, colNum), TwoDC, TwoDD;	
	srand(time(0));

	cout << "The array A is: " << endl;
	TwoDA.FillData();
	TwoDA.Output(); 
	cout << "The array B is: " << endl;
	TwoDB.FillData();
	TwoDB.Output(); 
	
	cout << "\nC = A + B = " << endl;
	TwoDC = TwoDA + TwoDB;
	TwoDC.Output();

	cout << "\nD = A - B = " << endl;
	TwoDD = TwoDA - TwoDB;
	TwoDD.Output();
	
	cout << "\nA = B = C: " << endl;
	TwoDA = TwoDB = TwoDC;
	cout << "\nOutput 2D array A after chain of assignment:" << endl;
	TwoDA.Output();
	cout << "Output 2D array B after chain of assignment" << endl;
	TwoDB.Output();

	cout << "\nUsing A's copy constructor to initialize a new object:" << endl;
	TwoDArray TwoDE(TwoDA);
	TwoDE.Output();	
	return 0;
	
}

TwoDArray::TwoDArray(int rowNum, int colNum) {
	rowSize = rowNum;
	colSize = colNum;
	
	A = new OneDArray[rowSize];

	for(int i = 0; i < rowSize; i++)
		A[i].Create(colSize);
}

void TwoDArray::FillData() {
	for(int i = 0; i < rowSize; i++) 
		A[i].FillArray(colSize);
}

TwoDArray::TwoDArray(const TwoDArray& TwoDA) {
	int i;

	rowSize = TwoDA.rowSize;
	colSize = TwoDA.colSize;
	A = new OneDArray[rowSize];

	for(i = 0; i < rowSize; i++) 
		A[i] = TwoDA[i];
}

void TwoDArray::Output() {
	int i;
	for(i = 0; i < rowSize; i++) 
		A[i].Output(colSize);
		
	cout << endl;
}

const TwoDArray TwoDArray::operator+(const TwoDArray& TwoDB) {
	int i, j;

	rowSize = TwoDB.rowSize;
	colSize = TwoDB.colSize;
	TwoDArray TwoDC(rowSize, colSize);
	
	for(i = 0; i < rowSize; i++)
		TwoDC.A[i] = A[i] + TwoDB.A[i];
						
	return TwoDC;
}

const TwoDArray TwoDArray::operator-(const TwoDArray& TwoDB) {
	int i, j;

	rowSize = TwoDB.rowSize;
	colSize = TwoDB.colSize;
	TwoDArray TwoDD(rowSize, colSize);
	
	for(i = 0; i < rowSize; i++)
		TwoDD.A[i] = A[i] - TwoDB.A[i];
			
	return TwoDD;
}

TwoDArray& TwoDArray::operator=(const TwoDArray& TwoDA) {
	if(this == &TwoDA)
		return *this;
	else {
		int i, j;

		delete [] A;

		rowSize = TwoDA.rowSize;
		colSize = TwoDA.colSize;
		A = new OneDArray[rowSize];

		for(i = 0; i < rowSize; i++)
			A[i] = TwoDA.A[i];
	}
				
	return *this;
}
